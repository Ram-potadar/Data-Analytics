# -*- coding: utf-8 -*-
"""os_file_operation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UNzPedOXxAxEPMgbpYWDIRuV1P--Ck0p

## Interacting with the OS and filesystem
"""

import os

"""We can check the present working directory using the `os.getcwd` function."""

os.getcwd()

"""To get files in the directory"""

os.listdir('.') #relative path

os.listdir('/usr') #absoulte path

"""You can create a new directory using `os.makedirs`. Let's create a new directory called `data`, where we'll later download some files.

"""

os.makedirs('./data', exist_ok = True)

"""Verify whether `data` dictionary
 is present in the currenet directory

"""

'data' in os.listdir('.')

os.listdir('./data')

url1 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans1.txt'
url2 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans2.txt'
url3 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans3.txt'

from urllib.request import urlretrieve

urlretrieve(url1, './data/loans1.txt')

urlretrieve(url2, './data/loans2.txt')

urlretrieve(url3, './data/loans3.txt')

"""## Reading from file

To read the file we forst need to open the file using built in `open` function.

The `open` function rerurns a file objec and provides several mehtods for interacting with file's contents.
"""

file1 = open('./data/loans1.txt', mode = 'r')

"""The open function also accepts a mode argumemt to specifies how we can interac with file.
```
charcter   meaning
--------   ---------------------------
'r'        open for reading (default)
'w'        open for writing, truncating the file first
'x'        creae new file and open it for writing
'a'        open for writing, appending to the end of the file of its exists binary mode
'b'        binary mdoe
't'        tex mode
'+'        open a disk file for updating(reading and writing)
'U'        universal newline mode

```
"""

file1_contents = file1.read()

print(file1_contents)

file1.close()

"""##Closing files automatically using `with`"""

with open('./data/loans2.txt') as file2:
  file2_contents = file2.read()
  print(file2_contents)

"""##Reading file line by line

File objects provide a `readlines` method to read a file line-by-line.
"""

with open('./data/loans3.txt', 'r') as file3:
  file3_lines = file3.readlines()

file3_lines

"""##Processing the data from the files


*   Read the file line by line
*   Parse the first line to get a list of the column names or headers
*   Split each remaning lien and convert each value into float
*   Create a dictionary for each loan using the header as keys
*   Create a list of dictionaries to keep track of the loans



"""

def parse_headers (header_line):
   return header_line.strip().split(',')

file3_lines[0]

headers = parse_headers(file3_lines[0])

headers

"""Now, let's create the `parse_value` funtion that takes the line contaning some daa and returns a list of floating numsbers."""

def parse_values(data_line):
  values = []
  for i in data_line.strip().split(','):
    values.append(float(i))
  return values

file3_lines[1]



parse_values(file3_lines[1])

file3_lines[2]

parse_values(file3_lines[2])

"""The code above leades to the `value error ` as empty strings are cannot be converted into the float.

We can enhance the `parse_value` by hamdling this edge case and we also handel the case where value is not a float.

"""

def parse_values(data_line):
  values = []
  for i in data_line.strip().split(','):
    if i == '':
      values.append(float(0))
    else:
      try:
        values.append(float(i))
      except ValueError:
        values.append(i)

  return values

file3_lines[2]

parse_values(file3_lines[2])

"""Now let''s define the function `creat_item_dict` that takes a list of values and a lsit of headers as inputs and returns a dictionary with the values associated with their respective headers as keys."""

def create_item_dict(values, headers):
  result = {}
  for value, header in zip(values, headers):
    result[header] = value
  return result

for item in zip(['1','2','3'], ['q', 'w', 'e']):
  print(item)

file3_lines[2]

headers

create_item_dict(parse_values(file3_lines[2]), headers)

""" Now we are ready to the combine all together and `read_csv` file and convert it from CSV file to list of dictionaries."""

def parse_headers(header_line):
  return header_line.strip().split(',')

def parse_values(data_line):
  values = []
  for i in data_line.strip().split(','):
    if i == '':
      values.append(float(0))

    else:
      try:
        values.append(float(i))

      except ValueError:
        values.append(i)
  return values

def create_item_dict( headers, values):
  result = {}
  for key , value in zip (headers, values):
    result[key] = value
  return result


def read_csv(path):
  result = []
  with open(path, 'r') as f:

    lines = f.readlines()
    headers = parse_headers(lines[0])
    for data_line in lines[1:]:
      values = parse_values(data_line)
      item_dict = create_item_dict(headers, values)
      result.append(item_dict)

  return result

read_csv('./data/loans1.txt')

"""## Let's define the function to calculate the EMI of each loan  """

import math

def loan_emi(amount , duration , rate, down_payment = 0):
  loan_amount = amount - down_payment

  try:
    emi = loan_amount * rate * ((1+rate)** duration) / (((1+rate)**duration) - 1)

  except: ZeroDivisionError
  emi = math.ceil(emi)

  return emi

loans2 = read_csv('./data/loans2.txt')

loans2

for loan in loans2:
  loan['emi'] = loan_emi(loan['amount'], loan['duration'], loan['rate']/12, loan['down_payment'])

loans2

def compute_emi(loans):
  for loan in loans:
    loan['emi'] = loan_emi(loan['amount'], loan['duration'], loan['rate']/12, loan['down_payment'])

"""### Writing to files"""

loans2 = read_csv('./data/loans2.txt')

loans2

compute_emi(loans2)

loans2

with open('./data/emis2.txt', 'w') as f :
  for loan in loans2:
    f.write('{},{},{},{},{}\n'.format(
        loan['amount'],
        loan['duration'],
        loan['rate'],
        loan['down_payment'],
        loan['emi']
    ))

with open('./data/emis2.txt', 'r') as f:
  print(f.read())

"""Let's define a generic function `write_csv` which takes a list of dictionaries and write it to a file in CSV formate. We will also include the column headrs in the file line"""

def write_csv(items, path):
  with open(path, 'w') as f:

    if len(items) == 0:
      return

    headers = list(items[0].keys())
    f.write(','.join(headers) + '\n')

    for item in items:
      values = []
      for header in headers:
        values.append(str(item.get(header, "")))
      f.write(','.join(values) + "\n")

loans3 = read_csv('./data/loans3.txt')

compute_emi(loans3)

write_csv(loans3, './data/emis3.txt')

with open('./data/emis3.txt', 'r') as f:
  print(f.read())

for i in range(1,4):
  loans = read_csv('./data/loans{}.txt'. format(i))
  compute_emi(loans)
  write_csv(loans,'./data/emis{}.txt'.format(i))

os.listdir('./data')

